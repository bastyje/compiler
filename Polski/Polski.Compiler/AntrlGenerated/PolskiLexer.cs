//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sebastian/studia/inf/8/jfk/proj/Polski/Polski.Compiler/LanguageDefinition/Polski.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PolskiLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMICOLON=1, INT=2, INT64=3, FLOAT=4, DOUBLE=5, AND=6, EQUALS=7, GREATER_OR_EQUALS=8, 
		GREATER=9, LESS_OR_EQUALS=10, LESS=11, NOT=12, NOT_EQUALS=13, OR=14, XOR=15, 
		ASSIGN=16, DIVIDE=17, MINUS=18, MULTIPLY=19, PLUS=20, WHITESPACE=21, BIG_REAL_NUMBER=22, 
		REAL_NUMBER=23, BIG_INTEGER_NUMBER=24, INTEGER_NUMBER=25, IDENTIFIER=26;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SEMICOLON", "INT", "INT64", "FLOAT", "DOUBLE", "AND", "EQUALS", "GREATER_OR_EQUALS", 
		"GREATER", "LESS_OR_EQUALS", "LESS", "NOT", "NOT_EQUALS", "OR", "XOR", 
		"ASSIGN", "DIVIDE", "MINUS", "MULTIPLY", "PLUS", "WHITESPACE", "BIG_REAL_NUMBER", 
		"REAL_NUMBER", "BIG_INTEGER_NUMBER", "INTEGER_NUMBER", "IDENTIFIER"
	};


	public PolskiLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PolskiLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'int'", "'bigint'", "'float'", "'double'", "'&&'", "'=='", 
		"'>='", "'>'", "'<='", "'<'", "'!'", "'!='", "'||'", "'^'", "'='", "'/'", 
		"'-'", "'*'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMICOLON", "INT", "INT64", "FLOAT", "DOUBLE", "AND", "EQUALS", 
		"GREATER_OR_EQUALS", "GREATER", "LESS_OR_EQUALS", "LESS", "NOT", "NOT_EQUALS", 
		"OR", "XOR", "ASSIGN", "DIVIDE", "MINUS", "MULTIPLY", "PLUS", "WHITESPACE", 
		"BIG_REAL_NUMBER", "REAL_NUMBER", "BIG_INTEGER_NUMBER", "INTEGER_NUMBER", 
		"IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Polski.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PolskiLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,26,185,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,1,1,1,1,1,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,
		10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,4,20,117,8,20,11,20,12,20,118,1,
		20,1,20,1,21,1,21,1,21,5,21,126,8,21,10,21,12,21,129,9,21,3,21,131,8,21,
		1,21,1,21,4,21,135,8,21,11,21,12,21,136,1,21,1,21,1,22,1,22,1,22,5,22,
		144,8,22,10,22,12,22,147,9,22,3,22,149,8,22,1,22,1,22,4,22,153,8,22,11,
		22,12,22,154,1,23,1,23,1,23,5,23,160,8,23,10,23,12,23,163,9,23,3,23,165,
		8,23,1,23,1,23,1,24,1,24,1,24,5,24,172,8,24,10,24,12,24,175,9,24,3,24,
		177,8,24,1,25,1,25,5,25,181,8,25,10,25,12,25,184,9,25,0,0,26,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,1,0,5,3,0,
		9,10,13,13,32,32,1,0,49,57,1,0,48,57,2,0,65,90,97,122,3,0,48,57,65,90,
		97,122,196,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,
		0,3,55,1,0,0,0,5,59,1,0,0,0,7,66,1,0,0,0,9,72,1,0,0,0,11,79,1,0,0,0,13,
		82,1,0,0,0,15,85,1,0,0,0,17,88,1,0,0,0,19,90,1,0,0,0,21,93,1,0,0,0,23,
		95,1,0,0,0,25,97,1,0,0,0,27,100,1,0,0,0,29,103,1,0,0,0,31,105,1,0,0,0,
		33,107,1,0,0,0,35,109,1,0,0,0,37,111,1,0,0,0,39,113,1,0,0,0,41,116,1,0,
		0,0,43,130,1,0,0,0,45,148,1,0,0,0,47,164,1,0,0,0,49,176,1,0,0,0,51,178,
		1,0,0,0,53,54,5,59,0,0,54,2,1,0,0,0,55,56,5,105,0,0,56,57,5,110,0,0,57,
		58,5,116,0,0,58,4,1,0,0,0,59,60,5,98,0,0,60,61,5,105,0,0,61,62,5,103,0,
		0,62,63,5,105,0,0,63,64,5,110,0,0,64,65,5,116,0,0,65,6,1,0,0,0,66,67,5,
		102,0,0,67,68,5,108,0,0,68,69,5,111,0,0,69,70,5,97,0,0,70,71,5,116,0,0,
		71,8,1,0,0,0,72,73,5,100,0,0,73,74,5,111,0,0,74,75,5,117,0,0,75,76,5,98,
		0,0,76,77,5,108,0,0,77,78,5,101,0,0,78,10,1,0,0,0,79,80,5,38,0,0,80,81,
		5,38,0,0,81,12,1,0,0,0,82,83,5,61,0,0,83,84,5,61,0,0,84,14,1,0,0,0,85,
		86,5,62,0,0,86,87,5,61,0,0,87,16,1,0,0,0,88,89,5,62,0,0,89,18,1,0,0,0,
		90,91,5,60,0,0,91,92,5,61,0,0,92,20,1,0,0,0,93,94,5,60,0,0,94,22,1,0,0,
		0,95,96,5,33,0,0,96,24,1,0,0,0,97,98,5,33,0,0,98,99,5,61,0,0,99,26,1,0,
		0,0,100,101,5,124,0,0,101,102,5,124,0,0,102,28,1,0,0,0,103,104,5,94,0,
		0,104,30,1,0,0,0,105,106,5,61,0,0,106,32,1,0,0,0,107,108,5,47,0,0,108,
		34,1,0,0,0,109,110,5,45,0,0,110,36,1,0,0,0,111,112,5,42,0,0,112,38,1,0,
		0,0,113,114,5,43,0,0,114,40,1,0,0,0,115,117,7,0,0,0,116,115,1,0,0,0,117,
		118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,121,6,
		20,0,0,121,42,1,0,0,0,122,131,5,48,0,0,123,127,7,1,0,0,124,126,7,2,0,0,
		125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,131,
		1,0,0,0,129,127,1,0,0,0,130,122,1,0,0,0,130,123,1,0,0,0,131,132,1,0,0,
		0,132,134,5,46,0,0,133,135,7,2,0,0,134,133,1,0,0,0,135,136,1,0,0,0,136,
		134,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,139,5,98,0,0,139,44,1,
		0,0,0,140,149,5,48,0,0,141,145,7,1,0,0,142,144,7,2,0,0,143,142,1,0,0,0,
		144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,149,1,0,0,0,147,145,
		1,0,0,0,148,140,1,0,0,0,148,141,1,0,0,0,149,150,1,0,0,0,150,152,5,46,0,
		0,151,153,7,2,0,0,152,151,1,0,0,0,153,154,1,0,0,0,154,152,1,0,0,0,154,
		155,1,0,0,0,155,46,1,0,0,0,156,165,5,48,0,0,157,161,7,1,0,0,158,160,7,
		2,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,
		162,165,1,0,0,0,163,161,1,0,0,0,164,156,1,0,0,0,164,157,1,0,0,0,165,166,
		1,0,0,0,166,167,5,98,0,0,167,48,1,0,0,0,168,177,5,48,0,0,169,173,7,1,0,
		0,170,172,7,2,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,
		174,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,176,168,1,0,0,0,176,169,1,
		0,0,0,177,50,1,0,0,0,178,182,7,3,0,0,179,181,7,4,0,0,180,179,1,0,0,0,181,
		184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,52,1,0,0,0,184,182,1,0,
		0,0,13,0,118,127,130,136,145,148,154,161,164,173,176,182,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
