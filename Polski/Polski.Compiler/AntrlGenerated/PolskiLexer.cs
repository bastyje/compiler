//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Projects/compiler/Polski/Polski.Compiler/LanguageDefinition/Polski.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PolskiLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, PRINT=3, READ=4, INT=5, FLOAT=6, AND=7, EQUALS=8, GREATER_OR_EQUALS=9, 
		GREATER=10, LESS_OR_EQUALS=11, LESS=12, NOT=13, NOT_EQUALS=14, OR=15, 
		XOR=16, ASSIGN=17, DIVIDE=18, MINUS=19, MULTIPLY=20, PLUS=21, WHITESPACE=22, 
		INTEGER_NUMBER=23, REAL_NUMBER=24, QUOTED_STRING=25, IDENTIFIER=26, SEMICOLON=27;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "PRINT", "READ", "INT", "FLOAT", "AND", "EQUALS", "GREATER_OR_EQUALS", 
		"GREATER", "LESS_OR_EQUALS", "LESS", "NOT", "NOT_EQUALS", "OR", "XOR", 
		"ASSIGN", "DIVIDE", "MINUS", "MULTIPLY", "PLUS", "WHITESPACE", "INTEGER_NUMBER", 
		"REAL_NUMBER", "QUOTED_STRING", "IDENTIFIER", "SEMICOLON"
	};


	public PolskiLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PolskiLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'print'", "'read'", "'int'", "'float'", "'&&'", "'=='", 
		"'>='", "'>'", "'<='", "'<'", "'!'", "'!='", "'||'", "'^'", "'='", "'/'", 
		"'-'", "'*'", "'+'", null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "PRINT", "READ", "INT", "FLOAT", "AND", "EQUALS", "GREATER_OR_EQUALS", 
		"GREATER", "LESS_OR_EQUALS", "LESS", "NOT", "NOT_EQUALS", "OR", "XOR", 
		"ASSIGN", "DIVIDE", "MINUS", "MULTIPLY", "PLUS", "WHITESPACE", "INTEGER_NUMBER", 
		"REAL_NUMBER", "QUOTED_STRING", "IDENTIFIER", "SEMICOLON"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Polski.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PolskiLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,27,163,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,1,1,1,
		1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,
		10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,4,21,118,8,21,11,21,12,
		21,119,1,21,1,21,1,22,1,22,5,22,126,8,22,10,22,12,22,129,9,22,1,23,1,23,
		5,23,133,8,23,10,23,12,23,136,9,23,1,23,1,23,4,23,140,8,23,11,23,12,23,
		141,1,24,1,24,1,24,1,24,5,24,148,8,24,10,24,12,24,151,9,24,1,24,1,24,1,
		25,1,25,5,25,157,8,25,10,25,12,25,160,9,25,1,26,1,26,0,0,27,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,
		6,3,0,9,10,13,13,32,32,1,0,49,57,1,0,48,57,2,0,34,34,92,92,2,0,65,90,97,
		122,3,0,48,57,65,90,97,122,169,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,65,1,0,0,
		0,9,70,1,0,0,0,11,74,1,0,0,0,13,80,1,0,0,0,15,83,1,0,0,0,17,86,1,0,0,0,
		19,89,1,0,0,0,21,91,1,0,0,0,23,94,1,0,0,0,25,96,1,0,0,0,27,98,1,0,0,0,
		29,101,1,0,0,0,31,104,1,0,0,0,33,106,1,0,0,0,35,108,1,0,0,0,37,110,1,0,
		0,0,39,112,1,0,0,0,41,114,1,0,0,0,43,117,1,0,0,0,45,123,1,0,0,0,47,130,
		1,0,0,0,49,143,1,0,0,0,51,154,1,0,0,0,53,161,1,0,0,0,55,56,5,40,0,0,56,
		2,1,0,0,0,57,58,5,41,0,0,58,4,1,0,0,0,59,60,5,112,0,0,60,61,5,114,0,0,
		61,62,5,105,0,0,62,63,5,110,0,0,63,64,5,116,0,0,64,6,1,0,0,0,65,66,5,114,
		0,0,66,67,5,101,0,0,67,68,5,97,0,0,68,69,5,100,0,0,69,8,1,0,0,0,70,71,
		5,105,0,0,71,72,5,110,0,0,72,73,5,116,0,0,73,10,1,0,0,0,74,75,5,102,0,
		0,75,76,5,108,0,0,76,77,5,111,0,0,77,78,5,97,0,0,78,79,5,116,0,0,79,12,
		1,0,0,0,80,81,5,38,0,0,81,82,5,38,0,0,82,14,1,0,0,0,83,84,5,61,0,0,84,
		85,5,61,0,0,85,16,1,0,0,0,86,87,5,62,0,0,87,88,5,61,0,0,88,18,1,0,0,0,
		89,90,5,62,0,0,90,20,1,0,0,0,91,92,5,60,0,0,92,93,5,61,0,0,93,22,1,0,0,
		0,94,95,5,60,0,0,95,24,1,0,0,0,96,97,5,33,0,0,97,26,1,0,0,0,98,99,5,33,
		0,0,99,100,5,61,0,0,100,28,1,0,0,0,101,102,5,124,0,0,102,103,5,124,0,0,
		103,30,1,0,0,0,104,105,5,94,0,0,105,32,1,0,0,0,106,107,5,61,0,0,107,34,
		1,0,0,0,108,109,5,47,0,0,109,36,1,0,0,0,110,111,5,45,0,0,111,38,1,0,0,
		0,112,113,5,42,0,0,113,40,1,0,0,0,114,115,5,43,0,0,115,42,1,0,0,0,116,
		118,7,0,0,0,117,116,1,0,0,0,118,119,1,0,0,0,119,117,1,0,0,0,119,120,1,
		0,0,0,120,121,1,0,0,0,121,122,6,21,0,0,122,44,1,0,0,0,123,127,7,1,0,0,
		124,126,7,2,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,
		1,0,0,0,128,46,1,0,0,0,129,127,1,0,0,0,130,134,7,1,0,0,131,133,7,2,0,0,
		132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,
		1,0,0,0,136,134,1,0,0,0,137,139,5,46,0,0,138,140,7,2,0,0,139,138,1,0,0,
		0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,48,1,0,0,0,143,149,
		5,34,0,0,144,145,5,92,0,0,145,148,5,34,0,0,146,148,8,3,0,0,147,144,1,0,
		0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,
		152,1,0,0,0,151,149,1,0,0,0,152,153,5,34,0,0,153,50,1,0,0,0,154,158,7,
		4,0,0,155,157,7,5,0,0,156,155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,
		158,159,1,0,0,0,159,52,1,0,0,0,160,158,1,0,0,0,161,162,5,59,0,0,162,54,
		1,0,0,0,8,0,119,127,134,141,147,149,158,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
