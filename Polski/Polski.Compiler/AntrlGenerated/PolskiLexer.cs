//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sebastian/studia/inf/8/jfk/proj/Polski/Polski.Compiler/LanguageDefinition/Polski.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PolskiLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, SEMICOLON=3, INT=4, INT64=5, FLOAT=6, DOUBLE=7, AND=8, 
		EQUALS=9, GREATER_OR_EQUALS=10, GREATER=11, LESS_OR_EQUALS=12, LESS=13, 
		NOT=14, NOT_EQUALS=15, OR=16, XOR=17, ASSIGN=18, DIVIDE=19, MINUS=20, 
		MULTIPLY=21, PLUS=22, WHITESPACE=23, BIG_REAL_NUMBER=24, REAL_NUMBER=25, 
		BIG_INTEGER_NUMBER=26, INTEGER_NUMBER=27, IDENTIFIER=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "SEMICOLON", "INT", "INT64", "FLOAT", "DOUBLE", "AND", 
		"EQUALS", "GREATER_OR_EQUALS", "GREATER", "LESS_OR_EQUALS", "LESS", "NOT", 
		"NOT_EQUALS", "OR", "XOR", "ASSIGN", "DIVIDE", "MINUS", "MULTIPLY", "PLUS", 
		"WHITESPACE", "BIG_REAL_NUMBER", "REAL_NUMBER", "BIG_INTEGER_NUMBER", 
		"INTEGER_NUMBER", "IDENTIFIER"
	};


	public PolskiLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PolskiLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'read'", "';'", "'int'", "'bigint'", "'float'", "'double'", 
		"'&&'", "'=='", "'>='", "'>'", "'<='", "'<'", "'!'", "'!='", "'||'", "'^'", 
		"'='", "'/'", "'-'", "'*'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "SEMICOLON", "INT", "INT64", "FLOAT", "DOUBLE", "AND", 
		"EQUALS", "GREATER_OR_EQUALS", "GREATER", "LESS_OR_EQUALS", "LESS", "NOT", 
		"NOT_EQUALS", "OR", "XOR", "ASSIGN", "DIVIDE", "MINUS", "MULTIPLY", "PLUS", 
		"WHITESPACE", "BIG_REAL_NUMBER", "REAL_NUMBER", "BIG_INTEGER_NUMBER", 
		"INTEGER_NUMBER", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Polski.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PolskiLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,200,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,
		12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,
		18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,4,22,132,8,22,11,22,12,22,133,1,
		22,1,22,1,23,1,23,1,23,5,23,141,8,23,10,23,12,23,144,9,23,3,23,146,8,23,
		1,23,1,23,4,23,150,8,23,11,23,12,23,151,1,23,1,23,1,24,1,24,1,24,5,24,
		159,8,24,10,24,12,24,162,9,24,3,24,164,8,24,1,24,1,24,4,24,168,8,24,11,
		24,12,24,169,1,25,1,25,1,25,5,25,175,8,25,10,25,12,25,178,9,25,3,25,180,
		8,25,1,25,1,25,1,26,1,26,1,26,5,26,187,8,26,10,26,12,26,190,9,26,3,26,
		192,8,26,1,27,1,27,5,27,196,8,27,10,27,12,27,199,9,27,0,0,28,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		1,0,5,3,0,9,10,13,13,32,32,1,0,49,57,1,0,48,57,2,0,65,90,97,122,3,0,48,
		57,65,90,97,122,211,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,63,1,0,0,0,5,68,1,0,0,0,7,70,
		1,0,0,0,9,74,1,0,0,0,11,81,1,0,0,0,13,87,1,0,0,0,15,94,1,0,0,0,17,97,1,
		0,0,0,19,100,1,0,0,0,21,103,1,0,0,0,23,105,1,0,0,0,25,108,1,0,0,0,27,110,
		1,0,0,0,29,112,1,0,0,0,31,115,1,0,0,0,33,118,1,0,0,0,35,120,1,0,0,0,37,
		122,1,0,0,0,39,124,1,0,0,0,41,126,1,0,0,0,43,128,1,0,0,0,45,131,1,0,0,
		0,47,145,1,0,0,0,49,163,1,0,0,0,51,179,1,0,0,0,53,191,1,0,0,0,55,193,1,
		0,0,0,57,58,5,112,0,0,58,59,5,114,0,0,59,60,5,105,0,0,60,61,5,110,0,0,
		61,62,5,116,0,0,62,2,1,0,0,0,63,64,5,114,0,0,64,65,5,101,0,0,65,66,5,97,
		0,0,66,67,5,100,0,0,67,4,1,0,0,0,68,69,5,59,0,0,69,6,1,0,0,0,70,71,5,105,
		0,0,71,72,5,110,0,0,72,73,5,116,0,0,73,8,1,0,0,0,74,75,5,98,0,0,75,76,
		5,105,0,0,76,77,5,103,0,0,77,78,5,105,0,0,78,79,5,110,0,0,79,80,5,116,
		0,0,80,10,1,0,0,0,81,82,5,102,0,0,82,83,5,108,0,0,83,84,5,111,0,0,84,85,
		5,97,0,0,85,86,5,116,0,0,86,12,1,0,0,0,87,88,5,100,0,0,88,89,5,111,0,0,
		89,90,5,117,0,0,90,91,5,98,0,0,91,92,5,108,0,0,92,93,5,101,0,0,93,14,1,
		0,0,0,94,95,5,38,0,0,95,96,5,38,0,0,96,16,1,0,0,0,97,98,5,61,0,0,98,99,
		5,61,0,0,99,18,1,0,0,0,100,101,5,62,0,0,101,102,5,61,0,0,102,20,1,0,0,
		0,103,104,5,62,0,0,104,22,1,0,0,0,105,106,5,60,0,0,106,107,5,61,0,0,107,
		24,1,0,0,0,108,109,5,60,0,0,109,26,1,0,0,0,110,111,5,33,0,0,111,28,1,0,
		0,0,112,113,5,33,0,0,113,114,5,61,0,0,114,30,1,0,0,0,115,116,5,124,0,0,
		116,117,5,124,0,0,117,32,1,0,0,0,118,119,5,94,0,0,119,34,1,0,0,0,120,121,
		5,61,0,0,121,36,1,0,0,0,122,123,5,47,0,0,123,38,1,0,0,0,124,125,5,45,0,
		0,125,40,1,0,0,0,126,127,5,42,0,0,127,42,1,0,0,0,128,129,5,43,0,0,129,
		44,1,0,0,0,130,132,7,0,0,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,
		0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,6,22,0,0,136,46,1,0,0,0,137,
		146,5,48,0,0,138,142,7,1,0,0,139,141,7,2,0,0,140,139,1,0,0,0,141,144,1,
		0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,
		145,137,1,0,0,0,145,138,1,0,0,0,146,147,1,0,0,0,147,149,5,46,0,0,148,150,
		7,2,0,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,
		0,152,153,1,0,0,0,153,154,5,98,0,0,154,48,1,0,0,0,155,164,5,48,0,0,156,
		160,7,1,0,0,157,159,7,2,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,158,1,
		0,0,0,160,161,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,163,155,1,0,0,0,
		163,156,1,0,0,0,164,165,1,0,0,0,165,167,5,46,0,0,166,168,7,2,0,0,167,166,
		1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,50,1,0,0,0,
		171,180,5,48,0,0,172,176,7,1,0,0,173,175,7,2,0,0,174,173,1,0,0,0,175,178,
		1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,
		0,179,171,1,0,0,0,179,172,1,0,0,0,180,181,1,0,0,0,181,182,5,98,0,0,182,
		52,1,0,0,0,183,192,5,48,0,0,184,188,7,1,0,0,185,187,7,2,0,0,186,185,1,
		0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,192,1,0,0,0,
		190,188,1,0,0,0,191,183,1,0,0,0,191,184,1,0,0,0,192,54,1,0,0,0,193,197,
		7,3,0,0,194,196,7,4,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,
		0,197,198,1,0,0,0,198,56,1,0,0,0,199,197,1,0,0,0,13,0,133,142,145,151,
		160,163,169,176,179,188,191,197,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
