//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sebastian/studia/inf/8/jfk/proj/Polski/Polski.Compiler/LanguageDefinition/Polski.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PolskiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, ELSE=20, SEMICOLON=21, INT64=22, INT=23, DOUBLE=24, 
		LET=25, AND=26, EQUALS=27, GREATER_OR_EQUALS=28, GREATER=29, LESS_OR_EQUALS=30, 
		LESS=31, NOT=32, NOT_EQUALS=33, OR=34, XOR=35, ASSIGN=36, DIVIDE=37, MINUS=38, 
		MULTIPLY=39, PLUS=40, WHITESPACE=41, BIG_REAL_NUMBER=42, REAL_NUMBER=43, 
		BIG_INTEGER_NUMBER=44, INTEGER_NUMBER=45, IDENTIFIER=46;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_functionDeclaration = 3, 
		RULE_functionBlock = 4, RULE_block = 5, RULE_if = 6, RULE_while = 7, RULE_functionCall = 8, 
		RULE_print = 9, RULE_read = 10, RULE_booleanOrExpression = 11, RULE_booleanAndExpression = 12, 
		RULE_booleanXorExpression = 13, RULE_booleanPrimaryExpression = 14, RULE_booleanValue = 15, 
		RULE_expression = 16, RULE_additiveExpression = 17, RULE_multiplicativeExpression = 18, 
		RULE_unaryExpression = 19, RULE_primaryExpression = 20, RULE_number = 21, 
		RULE_declaration = 22, RULE_globalDefinition = 23, RULE_definition = 24, 
		RULE_assignment = 25, RULE_type = 26, RULE_numericType = 27;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "functionDeclaration", "functionBlock", 
		"block", "if", "while", "functionCall", "print", "read", "booleanOrExpression", 
		"booleanAndExpression", "booleanXorExpression", "booleanPrimaryExpression", 
		"booleanValue", "expression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "primaryExpression", "number", "declaration", "globalDefinition", 
		"definition", "assignment", "type", "numericType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'niechaj b\\u0119dzie operacja'", "'na warto\\u015Bciach'", "'kt\\u00F3rej rezultatem jest'", 
		"'{'", "'zwr\\u00F3\\u0107'", "'}'", "'je\\u017Celi'", "'to'", "'wykonaj'", 
		"'pod warunkiem, \\u017Ce'", "'dop\\u00F3ki'", "'wykonuj'", "'kr\\u0119\\u0107'", 
		"'wykonaj operacj\\u0119'", "'rezultatem operacji'", "'poka\\u017C mi'", 
		"'zaprezentuj'", "'zczytaj'", "'wszechobecna'", "'w przeciwnym razie'", 
		"';'", "'du\\u017Ca liczba ca\\u0142kowita'", "'liczba ca\\u0142kowita'", 
		"'liczba rzeczywista'", null, null, null, null, null, null, null, "'nieprawd\\u0105 jest, \\u017Ce'", 
		null, "'i/lub'", null, null, "'/'", "'-'", "'*'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "ELSE", "SEMICOLON", "INT64", 
		"INT", "DOUBLE", "LET", "AND", "EQUALS", "GREATER_OR_EQUALS", "GREATER", 
		"LESS_OR_EQUALS", "LESS", "NOT", "NOT_EQUALS", "OR", "XOR", "ASSIGN", 
		"DIVIDE", "MINUS", "MULTIPLY", "PLUS", "WHITESPACE", "BIG_REAL_NUMBER", 
		"REAL_NUMBER", "BIG_INTEGER_NUMBER", "INTEGER_NUMBER", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Polski.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PolskiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PolskiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PolskiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDefinitionContext[] globalDefinition() {
			return GetRuleContexts<GlobalDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDefinitionContext globalDefinition(int i) {
			return GetRuleContext<GlobalDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 56;
					globalDefinition();
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 62;
				functionDeclaration();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 68;
				line();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 131941458758288L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PolskiParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case INT64:
			case INT:
			case DOUBLE:
			case LET:
			case REAL_NUMBER:
			case BIG_INTEGER_NUMBER:
			case INTEGER_NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				statement();
				State = 74;
				Match(SEMICOLON);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				block();
				}
				break;
			case T__6:
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				@if();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78;
				@while();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 84;
				expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 85;
				print();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 86;
				read();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PolskiParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(T__0);
			State = 90;
			Match(IDENTIFIER);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 91;
				Match(T__1);
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 92;
					declaration();
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 62914560L) != 0) );
				}
			}

			State = 99;
			Match(T__2);
			State = 100;
			type();
			State = 101;
			functionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PolskiParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__3);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131941458758288L) != 0)) {
				{
				{
				State = 104;
				line();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(T__4);
			State = 111;
			expression();
			State = 112;
			Match(SEMICOLON);
			State = 113;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(T__3);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131941458758288L) != 0)) {
				{
				{
				State = 116;
				line();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOrExpressionContext booleanOrExpression() {
			return GetRuleContext<BooleanOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PolskiParser.ELSE, 0); }
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 12, RULE_if);
		int _la;
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(T__6);
				State = 125;
				booleanOrExpression();
				State = 126;
				Match(T__7);
				State = 127;
				block();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 128;
					Match(ELSE);
					State = 129;
					block();
					}
				}

				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(T__8);
				State = 133;
				block();
				State = 134;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==T__9) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 135;
				booleanOrExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOrExpressionContext booleanOrExpression() {
			return GetRuleContext<BooleanOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 14, RULE_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(T__10);
			State = 140;
			booleanOrExpression();
			State = 141;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12544L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 142;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PolskiParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 145;
			Match(IDENTIFIER);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 146;
				Match(T__1);
				State = 148;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 147;
						expression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 150;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 18, RULE_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_la = TokenStream.LA(1);
			if ( !(_la==T__15 || _la==T__16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 155;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PolskiParser.IDENTIFIER, 0); }
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 20, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(T__17);
			State = 158;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanAndExpressionContext[] booleanAndExpression() {
			return GetRuleContexts<BooleanAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanAndExpressionContext booleanAndExpression(int i) {
			return GetRuleContext<BooleanAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PolskiParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PolskiParser.OR, i);
		}
		public BooleanOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterBooleanOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitBooleanOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOrExpressionContext booleanOrExpression() {
		BooleanOrExpressionContext _localctx = new BooleanOrExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_booleanOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			booleanAndExpression();
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 161;
				Match(OR);
				State = 162;
				booleanAndExpression();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanXorExpressionContext[] booleanXorExpression() {
			return GetRuleContexts<BooleanXorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanXorExpressionContext booleanXorExpression(int i) {
			return GetRuleContext<BooleanXorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PolskiParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PolskiParser.AND, i);
		}
		public BooleanAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterBooleanAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitBooleanAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanAndExpressionContext booleanAndExpression() {
		BooleanAndExpressionContext _localctx = new BooleanAndExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_booleanAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			booleanXorExpression();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 169;
				Match(AND);
				State = 170;
				booleanXorExpression();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanXorExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanPrimaryExpressionContext[] booleanPrimaryExpression() {
			return GetRuleContexts<BooleanPrimaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanPrimaryExpressionContext booleanPrimaryExpression(int i) {
			return GetRuleContext<BooleanPrimaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(PolskiParser.XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR(int i) {
			return GetToken(PolskiParser.XOR, i);
		}
		public BooleanXorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanXorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterBooleanXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitBooleanXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanXorExpressionContext booleanXorExpression() {
		BooleanXorExpressionContext _localctx = new BooleanXorExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_booleanXorExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			booleanPrimaryExpression();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==XOR) {
				{
				{
				State = 177;
				Match(XOR);
				State = 178;
				booleanPrimaryExpression();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanPrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PolskiParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanPrimaryExpressionContext booleanPrimaryExpression() {
			return GetRuleContext<BooleanPrimaryExpressionContext>(0);
		}
		public BooleanPrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanPrimaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterBooleanPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitBooleanPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanPrimaryExpressionContext booleanPrimaryExpression() {
		BooleanPrimaryExpressionContext _localctx = new BooleanPrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_booleanPrimaryExpression);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
			case T__14:
			case REAL_NUMBER:
			case BIG_INTEGER_NUMBER:
			case INTEGER_NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				booleanValue();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(NOT);
				State = 186;
				booleanPrimaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(PolskiParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PolskiParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(PolskiParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(PolskiParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(PolskiParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(PolskiParser.LESS_OR_EQUALS, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_booleanValue);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				expression();
				State = 190;
				Match(EQUALS);
				State = 191;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				expression();
				State = 194;
				Match(NOT_EQUALS);
				State = 195;
				expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 197;
				expression();
				State = 198;
				Match(GREATER);
				State = 199;
				expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 201;
				expression();
				State = 202;
				Match(GREATER_OR_EQUALS);
				State = 203;
				expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				expression();
				State = 206;
				Match(LESS);
				State = 207;
				expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 209;
				expression();
				State = 210;
				Match(LESS_OR_EQUALS);
				State = 211;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_expression);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_NUMBER:
			case BIG_INTEGER_NUMBER:
			case INTEGER_NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215;
				additiveExpression();
				}
				break;
			case T__13:
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(PolskiParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(PolskiParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(PolskiParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(PolskiParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			multiplicativeExpression();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MINUS || _la==PLUS) {
				{
				{
				State = 220;
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==PLUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 221;
				multiplicativeExpression();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTIPLY() { return GetTokens(PolskiParser.MULTIPLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY(int i) {
			return GetToken(PolskiParser.MULTIPLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIVIDE() { return GetTokens(PolskiParser.DIVIDE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE(int i) {
			return GetToken(PolskiParser.DIVIDE, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			unaryExpression();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DIVIDE || _la==MULTIPLY) {
				{
				{
				State = 228;
				_la = TokenStream.LA(1);
				if ( !(_la==DIVIDE || _la==MULTIPLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 229;
				unaryExpression();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			primaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PolskiParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_primaryExpression);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237;
				Match(IDENTIFIER);
				}
				break;
			case REAL_NUMBER:
			case BIG_INTEGER_NUMBER:
			case INTEGER_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_NUMBER() { return GetToken(PolskiParser.INTEGER_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIG_INTEGER_NUMBER() { return GetToken(PolskiParser.BIG_INTEGER_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_NUMBER() { return GetToken(PolskiParser.REAL_NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 42, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 61572651155456L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PolskiParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(PolskiParser.LET, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 243;
				Match(LET);
				}
			}

			State = 246;
			type();
			State = 247;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(PolskiParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PolskiParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PolskiParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PolskiParser.SEMICOLON, 0); }
		public GlobalDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterGlobalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitGlobalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDefinitionContext globalDefinition() {
		GlobalDefinitionContext _localctx = new GlobalDefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_globalDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(LET);
			State = 250;
			Match(T__18);
			State = 251;
			type();
			State = 252;
			Match(IDENTIFIER);
			State = 253;
			Match(ASSIGN);
			State = 254;
			number();
			State = 255;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PolskiParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			declaration();
			State = 258;
			Match(ASSIGN);
			State = 259;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PolskiParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PolskiParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 50, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(IDENTIFIER);
			State = 262;
			Match(ASSIGN);
			State = 263;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			numericType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PolskiParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT64() { return GetToken(PolskiParser.INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(PolskiParser.DOUBLE, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPolskiListener typedListener = listener as IPolskiListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolskiVisitor<TResult> typedVisitor = visitor as IPolskiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_numericType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 29360128L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,46,270,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,5,0,58,
		8,0,10,0,12,0,61,9,0,1,0,5,0,64,8,0,10,0,12,0,67,9,0,1,0,4,0,70,8,0,11,
		0,12,0,71,1,1,1,1,1,1,1,1,1,1,1,1,3,1,80,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,
		2,88,8,2,1,3,1,3,1,3,1,3,4,3,94,8,3,11,3,12,3,95,3,3,98,8,3,1,3,1,3,1,
		3,1,3,1,4,1,4,5,4,106,8,4,10,4,12,4,109,9,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
		5,5,5,118,8,5,10,5,12,5,121,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,131,
		8,6,1,6,1,6,1,6,1,6,1,6,3,6,138,8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
		8,4,8,149,8,8,11,8,12,8,150,3,8,153,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
		1,11,1,11,5,11,164,8,11,10,11,12,11,167,9,11,1,12,1,12,1,12,5,12,172,8,
		12,10,12,12,12,175,9,12,1,13,1,13,1,13,5,13,180,8,13,10,13,12,13,183,9,
		13,1,14,1,14,1,14,3,14,188,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,3,15,214,8,15,1,16,1,16,3,16,218,8,16,1,17,1,17,1,17,5,17,223,
		8,17,10,17,12,17,226,9,17,1,18,1,18,1,18,5,18,231,8,18,10,18,12,18,234,
		9,18,1,19,1,19,1,20,1,20,3,20,240,8,20,1,21,1,21,1,22,3,22,245,8,22,1,
		22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
		24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,0,0,28,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,8,2,0,
		7,7,10,10,2,0,8,8,12,13,1,0,14,15,1,0,16,17,2,0,38,38,40,40,2,0,37,37,
		39,39,1,0,43,45,1,0,22,24,274,0,59,1,0,0,0,2,79,1,0,0,0,4,87,1,0,0,0,6,
		89,1,0,0,0,8,103,1,0,0,0,10,115,1,0,0,0,12,137,1,0,0,0,14,139,1,0,0,0,
		16,144,1,0,0,0,18,154,1,0,0,0,20,157,1,0,0,0,22,160,1,0,0,0,24,168,1,0,
		0,0,26,176,1,0,0,0,28,187,1,0,0,0,30,213,1,0,0,0,32,217,1,0,0,0,34,219,
		1,0,0,0,36,227,1,0,0,0,38,235,1,0,0,0,40,239,1,0,0,0,42,241,1,0,0,0,44,
		244,1,0,0,0,46,249,1,0,0,0,48,257,1,0,0,0,50,261,1,0,0,0,52,265,1,0,0,
		0,54,267,1,0,0,0,56,58,3,46,23,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,
		0,0,59,60,1,0,0,0,60,65,1,0,0,0,61,59,1,0,0,0,62,64,3,6,3,0,63,62,1,0,
		0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,69,1,0,0,0,67,65,1,0,
		0,0,68,70,3,2,1,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,
		0,0,72,1,1,0,0,0,73,74,3,4,2,0,74,75,5,21,0,0,75,80,1,0,0,0,76,80,3,10,
		5,0,77,80,3,12,6,0,78,80,3,14,7,0,79,73,1,0,0,0,79,76,1,0,0,0,79,77,1,
		0,0,0,79,78,1,0,0,0,80,3,1,0,0,0,81,88,3,44,22,0,82,88,3,48,24,0,83,88,
		3,50,25,0,84,88,3,32,16,0,85,88,3,18,9,0,86,88,3,20,10,0,87,81,1,0,0,0,
		87,82,1,0,0,0,87,83,1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,
		88,5,1,0,0,0,89,90,5,1,0,0,90,97,5,46,0,0,91,93,5,2,0,0,92,94,3,44,22,
		0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,
		0,97,91,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,5,3,0,0,100,101,3,52,
		26,0,101,102,3,8,4,0,102,7,1,0,0,0,103,107,5,4,0,0,104,106,3,2,1,0,105,
		104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,110,1,
		0,0,0,109,107,1,0,0,0,110,111,5,5,0,0,111,112,3,32,16,0,112,113,5,21,0,
		0,113,114,5,6,0,0,114,9,1,0,0,0,115,119,5,4,0,0,116,118,3,2,1,0,117,116,
		1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,122,1,0,0,
		0,121,119,1,0,0,0,122,123,5,6,0,0,123,11,1,0,0,0,124,125,5,7,0,0,125,126,
		3,22,11,0,126,127,5,8,0,0,127,130,3,10,5,0,128,129,5,20,0,0,129,131,3,
		10,5,0,130,128,1,0,0,0,130,131,1,0,0,0,131,138,1,0,0,0,132,133,5,9,0,0,
		133,134,3,10,5,0,134,135,7,0,0,0,135,136,3,22,11,0,136,138,1,0,0,0,137,
		124,1,0,0,0,137,132,1,0,0,0,138,13,1,0,0,0,139,140,5,11,0,0,140,141,3,
		22,11,0,141,142,7,1,0,0,142,143,3,10,5,0,143,15,1,0,0,0,144,145,7,2,0,
		0,145,152,5,46,0,0,146,148,5,2,0,0,147,149,3,32,16,0,148,147,1,0,0,0,149,
		150,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,146,1,
		0,0,0,152,153,1,0,0,0,153,17,1,0,0,0,154,155,7,3,0,0,155,156,3,32,16,0,
		156,19,1,0,0,0,157,158,5,18,0,0,158,159,5,46,0,0,159,21,1,0,0,0,160,165,
		3,24,12,0,161,162,5,34,0,0,162,164,3,24,12,0,163,161,1,0,0,0,164,167,1,
		0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,23,1,0,0,0,167,165,1,0,0,0,168,
		173,3,26,13,0,169,170,5,26,0,0,170,172,3,26,13,0,171,169,1,0,0,0,172,175,
		1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,25,1,0,0,0,175,173,1,0,0,0,
		176,181,3,28,14,0,177,178,5,35,0,0,178,180,3,28,14,0,179,177,1,0,0,0,180,
		183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,27,1,0,0,0,183,181,1,0,
		0,0,184,188,3,30,15,0,185,186,5,32,0,0,186,188,3,28,14,0,187,184,1,0,0,
		0,187,185,1,0,0,0,188,29,1,0,0,0,189,190,3,32,16,0,190,191,5,27,0,0,191,
		192,3,32,16,0,192,214,1,0,0,0,193,194,3,32,16,0,194,195,5,33,0,0,195,196,
		3,32,16,0,196,214,1,0,0,0,197,198,3,32,16,0,198,199,5,29,0,0,199,200,3,
		32,16,0,200,214,1,0,0,0,201,202,3,32,16,0,202,203,5,28,0,0,203,204,3,32,
		16,0,204,214,1,0,0,0,205,206,3,32,16,0,206,207,5,31,0,0,207,208,3,32,16,
		0,208,214,1,0,0,0,209,210,3,32,16,0,210,211,5,30,0,0,211,212,3,32,16,0,
		212,214,1,0,0,0,213,189,1,0,0,0,213,193,1,0,0,0,213,197,1,0,0,0,213,201,
		1,0,0,0,213,205,1,0,0,0,213,209,1,0,0,0,214,31,1,0,0,0,215,218,3,34,17,
		0,216,218,3,16,8,0,217,215,1,0,0,0,217,216,1,0,0,0,218,33,1,0,0,0,219,
		224,3,36,18,0,220,221,7,4,0,0,221,223,3,36,18,0,222,220,1,0,0,0,223,226,
		1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,35,1,0,0,0,226,224,1,0,0,0,
		227,232,3,38,19,0,228,229,7,5,0,0,229,231,3,38,19,0,230,228,1,0,0,0,231,
		234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,37,1,0,0,0,234,232,1,0,
		0,0,235,236,3,40,20,0,236,39,1,0,0,0,237,240,5,46,0,0,238,240,3,42,21,
		0,239,237,1,0,0,0,239,238,1,0,0,0,240,41,1,0,0,0,241,242,7,6,0,0,242,43,
		1,0,0,0,243,245,5,25,0,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,
		0,246,247,3,52,26,0,247,248,5,46,0,0,248,45,1,0,0,0,249,250,5,25,0,0,250,
		251,5,19,0,0,251,252,3,52,26,0,252,253,5,46,0,0,253,254,5,36,0,0,254,255,
		3,42,21,0,255,256,5,21,0,0,256,47,1,0,0,0,257,258,3,44,22,0,258,259,5,
		36,0,0,259,260,3,32,16,0,260,49,1,0,0,0,261,262,5,46,0,0,262,263,5,36,
		0,0,263,264,3,32,16,0,264,51,1,0,0,0,265,266,3,54,27,0,266,53,1,0,0,0,
		267,268,7,7,0,0,268,55,1,0,0,0,23,59,65,71,79,87,95,97,107,119,130,137,
		150,152,165,173,181,187,213,217,224,232,239,244
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
